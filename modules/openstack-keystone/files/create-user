#!/usr/bin/python

'''This creates an admin project, an admin user, and an admin role, and
gives the admin user the admin role in the admin project.  This has the
side affect of giving the user admin privileges in a few other places.

This script can safely be run multiple times.'''

import sys
import os
import random
import string
import argparse

from keystoneclient.v2_0.client import Client

client = Client(token=os.environ['SERVICE_TOKEN'], endpoint=os.environ['SERVICE_ENDPOINT'])

def parse_args():
    p = argparse.ArgumentParser()

    p.add_argument('--tenant-name', '-t', default='admin')
    p.add_argument('--user-name', '-u', default='admin')
    p.add_argument('--role-name', '-r', default='admin')
    p.add_argument('--password', '-p')
    p.add_argument('--output-file', '-o')
    p.add_argument('--check', action='store_true')

    return p.parse_args()

def tenant_lookup_by_name(name):
    global client

    for tenant in client.tenants.list():
        if tenant.name == name:
            return tenant

def role_lookup_by_name(name):
    global client

    for role in client.roles.list():
        if role.name == name:
            return role

def user_lookup_by_name(name):
    global client

    for user in client.users.list():
        if user.name == name:
            return user

def main():
    opts = parse_args()

    # This allows a Puppet manifest to check if the admin
    # user exists.
    if opts.check:
        if user_lookup_by_name(opts.user_name):
            sys.exit(0)
        else:
            sys.exit(1)

    if not opts.password:
        opts.password = ''.join(
                random.sample(string.letters + string.digits, 25))
    elif opts.password.startswith('@'):
        with open(opts.password[1:]) as fd:
            opts.password = fd.read()

    # Create admin tenant.
    admin_tenant =  tenant_lookup_by_name(opts.tenant_name)

    if not admin_tenant:
        print >>sys.stderr, 'Creating tenant "%s".' % opts.tenant_name
        admin_tenant = client.tenants.create(opts.tenant_name)

    # Create admin role.
    admin_role = role_lookup_by_name(opts.role_name)

    if not admin_role:
        print >>sys.stderr, 'Creating role "%s".' % opts.role_name
        admin_role = client.roles.create(opts.role_name)

    # Create admin user.
    admin_user = user_lookup_by_name(opts.user_name)

    if not admin_user:
        print >>sys.stderr, 'Creating user "%s".' % opts.user_name
        admin_user = client.users.create(opts.user_name,
                opts.password, '', tenant_id=admin_tenant.id)
    else:
        print >>sys.stderr, 'Updating password for user "%s".' % opts.user_name
        client.users.update_password(admin_user, opts.password)

    # Add admin user to admin role.
    print >>sys.stderr, 'Adding user "%s" to role "%s".' % (
            admin_user.name,
            admin_role.name)

    client.roles.add_user_role(admin_user, admin_role, tenant=admin_tenant)

    if opts.output_file:
        sys.stdout = open(opts.output_file, 'w')

    print '# OpenStack credentials file'
    print 'OS_AUTH_URL="%s"' % os.environ['SERVICE_ENDPOINT']
    print 'OS_USERNAME="%s"' % admin_user.name
    print 'OS_PASSWORD="%s"' % opts.password
    print 'OS_TENANT_NAME="%s"' % admin_tenant.name
    print 'export OS_AUTH_URL OS_USERNAME OS_PASSWORD OS_TENANT_NAME'

if __name__ == '__main__':
    main()

